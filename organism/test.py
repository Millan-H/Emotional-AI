import cv2
import numpy as np

class EnvClassifier:
    def __init__(self):
        pass
    def getObjs(self, camData, rangeOfVisionPx):
        camDataBW=[]
        for i in range(len(camData)):
            camDataBW.append((camData[i])/255)
        camDataSpliced=[]
        spliceCount=-1
        for i in range(len(camDataBW)):
            if i%rangeOfVisionPx==0:
                camDataSpliced.append([])
                spliceCount+=1
            camDataSpliced[spliceCount].append(camDataBW[i])
        colorGrads=[]
        spliceCount=-1
        for i in range(len(camDataSpliced)):
            colorGrads.append([])
            for j in range(len(camDataSpliced[i])):
                try:
                    colorGrads[i].append(abs((camDataSpliced[i][j+1]-camDataSpliced[i][j])+(camDataSpliced[i+1][j]-camDataSpliced[i][j])))
                except:
                    colorGrads[i].append(abs((camDataSpliced[i][j-1]-camDataSpliced[i][j])+(camDataSpliced[i-1][j]-camDataSpliced[i][j])))
        edges=[[0 for j in range(len(colorGrads[i]))] for i in range(len(colorGrads))]
        for i in range(len(colorGrads)):
            for j in range(len(colorGrads)):
                if colorGrads[i][j]>0.2:
                    edges[i][j]=1
        for i in range(len(edges)):
            print(edges[i])
        objs=[]
        objCount=-1
        edgePodsSpliced=[]
        for i in range(len(edges)):
            edgePodsSpliced.append([])
            for j in range(len(edges)):
                if j>0 and j<(rangeOfVisionPx-1):
                    edgePodsSpliced[i].append([edges[i][j-1], edges[i][j], edges[i][j+1]])
                else:
                    try:
                        edgePodsSpliced[i].append([edges[i][j], edges[i][j+1]])
                    except:
                        edgePodsSpliced[i].append([edges[i][j-1], edges[i][j]])
        edgePodsGroupedSpliced=[]
        for i in range(len(edgePodsSpliced)):
            for j in range(len(edgePodsSpliced)):
                if i>0 and i<len(camDataSpliced)-1:
                    edgePodsGroupedSpliced.append([edgePodsSpliced[i-1][j], edgePodsSpliced[i][j], edgePodsSpliced[i+1][j]])
                else:
                    try:
                        edgePodsGroupedSpliced.append([edgePodsSpliced[i][j], edgePodsSpliced[i+1][j]])
                    except:
                        edgePodsGroupedSpliced.append([edgePodsSpliced[i-1][j], edgePodsSpliced[i][j]])
        edgePods=[]
        for i in range(len(edgePodsGroupedSpliced)):
            edgePods.append([])
            for j in range(len(edgePodsGroupedSpliced[i])):
                for k in range(len(edgePodsGroupedSpliced[i][j])):
                    edgePods[i].append(edgePodsGroupedSpliced[i][j][k])
        for i in range(len(edges)):
            for j in range(len(edges[i])):
                if 1 in edgePods[i*rangeOfVisionPx+j]:
                    if edges[i][j]==0:
                            for k in range(len(edgePodsGroupedSpliced[i*rangeOfVisionPx+j])):
                                if 1 in edgePodsGroupedSpliced[i*rangeOfVisionPx+j][k]:
                                    oneList=k
                            if oneList==1:
                                objs.append([[i,j],[i,j]])
                                objCount+=1
                    if edges[i][j]==1:
                        for k in range(len(edgePodsGroupedSpliced[i*rangeOfVisionPx+j])):
                            if 1 in edgePodsGroupedSpliced[i*rangeOfVisionPx+j][k]:
                                oneList=k
                        if objCount>-1:
                            objs[objCount][1][0]+=edgePodsGroupedSpliced[i*rangeOfVisionPx+j][oneList].index(1)-1
                            objs[objCount][1][1]+=oneList-1
        print(objs)
        return edges
    def getObjsColorBlob(self, camData, rangeOfVisionPx, sensitivity=16):
        colorRangeSet=[]
        camDataSpliced=[]
        spliceCount=-1
        for i in range(len(camData)):
            if i%rangeOfVisionPx==0:
                camDataSpliced.append([])
                spliceCount+=1
            camDataSpliced[spliceCount].append(camData[i])
        
        image=np.array(camData, dtype=np.uint8).reshape(rangeOfVisionPx, len(camDataSpliced), 3)
        for i in range(len(camDataSpliced)):
            for j in range(len(camDataSpliced[i])):
                if len(colorRangeSet)==0:
                    lower=[max(0,camDataSpliced[i][j][0]-sensitivity),max(0,camDataSpliced[i][j][1]-sensitivity),max(0,camDataSpliced[i][j][2]-sensitivity)]
                    upper=[min(255,camDataSpliced[i][j][0]+sensitivity),min(255,camDataSpliced[i][j][1]+sensitivity),min(255,camDataSpliced[i][j][2]+sensitivity)]
                    colorRangeSet.append([lower,upper])
                else:
                    inRange=False
                    for k in range(len(colorRangeSet)):
                        if colorRangeSet[k][0][0]-sensitivity<=camDataSpliced[i][j][0]<=colorRangeSet[k][1][0]+sensitivity and colorRangeSet[k][0][1]-sensitivity<=camDataSpliced[i][j][1]<=colorRangeSet[k][1][1]+sensitivity and colorRangeSet[k][0][2]-sensitivity<=camDataSpliced[i][j][2]<=colorRangeSet[k][1][2]+sensitivity:
                            inRange=True
                            break
                    if not inRange:
                        lower=[max(0,camDataSpliced[i][j][0]-sensitivity),max(0,camDataSpliced[i][j][1]-sensitivity),max(0,camDataSpliced[i][j][2]-sensitivity)]
                        upper=[min(255,camDataSpliced[i][j][0]+sensitivity),min(255,camDataSpliced[i][j][1]+sensitivity),min(255,camDataSpliced[i][j][2]+sensitivity)]
                        colorRangeSet.append([lower,upper])
        
        masks=[]
        for i in range(len(colorRangeSet)):
            masks.append(cv2.inRange(image, np.array(colorRangeSet[i][0]), np.array(colorRangeSet[i][1])))

        masksSpliced=[]
        for i in range(len(masks)):
            masksSpliced.append([])
            spliceCount=-1
            for j in range(len(masks[i])):
                for k in range(len(masks[i][j])):
                    if k%rangeOfVisionPx==0:
                        masksSpliced[i].append([])
                        spliceCount+=1
                    masksSpliced[i][spliceCount].append(int(masks[i][j][k]))

        maskDict={}
        for i in range(len(masksSpliced)):
            maskDict[i]={}
            for j in range(len(masksSpliced[i])):
                maskDict[i][j]={}
                for k in range(len(masksSpliced[i][j])):
                    maskDict[i][j][k]=False

        objs=[]
        
        for i in range(len(masks)):
            objNum=0
            objs.append([])
            for j in range(0,len(masks[i])-1):
                for k in range(0,len(masks[i][j])-1):

                    if masks[i][j][k]==255:
                        if len(objs[i])==0:
                            objs[i].append([[j,k]])
                        else:
                            if maskDict[i][j][k-1] or maskDict[i][j-1][k] or maskDict[i][j][k+1] or maskDict[i][j+1][k]:
                                objs[i][objNum].append([j,k])
                                maskDict[i][j][k]=True
                            else:
                                objs[i].append([[j,k]])
                                maskDict[i][j][k]=True
                                objNum+=1
        print()
    def classifyObjs(self, objs):
        pass
    def classifyEnv(self, envData):
        pass
    def updateObjClassifier(self, trainData):
        pass
    def updateEnvClassifier(self, trainData):
        pass

redBox = [
    [255, 255, 247], [255, 255, 248], [255, 250, 250], [252, 246, 255], [255, 245, 255], [255, 253, 255], [255, 254, 249], [255, 245, 255], [253, 255, 255], [245, 255, 255], [255, 255, 255], [255, 255, 247], [249, 251, 255], [255, 246, 255], [255, 247, 249], [255, 255, 252], [255, 253, 253], [245, 246, 247], [255, 255, 255], [254, 251, 246], [255, 252, 246], [255, 250, 255], [254, 255, 250], [245, 248, 255], [249, 255, 255], [255, 253, 255], [245, 253, 253], [251, 255, 252],
    [242, 242, 236], [251, 247, 254], [255, 251, 255], [250, 255, 255], [251, 255, 247], [255, 247, 255], [250, 253, 255], [255, 254, 255], [255, 248, 255], [252, 253, 255], [252, 255, 249], [255, 245, 254], [255, 246, 255], [250, 255, 246], [251, 253, 247], [255, 245, 255], [249, 255, 245], [248, 255, 255], [247, 245, 246], [248, 254, 251], [248, 254, 248], [245, 249, 254], [252, 253, 255], [250, 255, 250], [245, 251, 255], [255, 247, 247], [254, 253, 252], [252, 245, 255],
    [247, 245, 255], [255, 245, 255], [249, 255, 248], [251, 250, 254], [255, 253, 249], [251, 255, 249], [255, 252, 255], [245, 250, 255], [247, 247, 252], [247, 255, 255], [249, 255, 245], [252, 255, 245], [255, 255, 253], [254, 255, 255], [249, 246, 245], [248, 250, 255], [246, 251, 249], [250, 245, 247], [250, 246, 255], [255, 255, 250], [250, 255, 255], [248, 248, 248], [255, 255, 252], [253, 255, 245], [255, 249, 249], [249, 255, 255], [251, 255, 254], [249, 253, 255],
    [255, 250, 248], [247, 254, 255], [245, 255, 255], [255, 255, 245], [255, 255, 255], [252, 255, 250], [247, 246, 255], [250, 255, 249], [255, 255, 246], [255, 251, 250], [245, 251, 249], [255, 253, 245], [255, 245, 252], [255, 250, 255], [254, 255, 254], [247, 252, 254], [255, 247, 253], [255, 249, 255], [251, 251, 250], [245, 255, 255], [251, 249, 251], [255, 255, 248], [253, 253, 255], [255, 246, 249], [255, 253, 249], [244, 244, 244], [250, 249, 250], [246, 255, 254],
    [255, 246, 246], [251, 255, 246], [245, 255, 254], [255, 250, 255], [244, 7, 11], [227, 0, 10], [232, 8, 15], [253, 12, 7], [255, 0, 12], [238, 10, 15], [251, 1, 14], [232, 13, 8], [255, 6, 14], [220, 8, 3], [231, 0, 0], [248, 10, 2], [255, 12, 2], [241, 8, 2], [255, 9, 13], [237, 13, 11], [235, 2, 8], [224, 0, 5], [242, 7, 5], [250, 10, 0], [255, 255, 255], [252, 254, 254], [255, 255, 251], [252, 252, 255],
    [255, 252, 248], [253, 247, 246], [250, 253, 253], [255, 255, 248], [255, 8, 0], [255, 15, 4], [233, 5, 8], [227, 5, 7], [236, 15, 1], [255, 0, 0], [235, 1, 4], [249, 0, 2], [252, 7, 10], [255, 8, 10], [214, 11, 9], [244, 1, 2], [243, 10, 11], [227, 8, 3], [238, 7, 14], [251, 4, 5], [249, 4, 6], [224, 3, 14], [255, 13, 15], [240, 10, 5], [246, 248, 251], [255, 248, 255], [255, 249, 255], [248, 245, 250],
    [249, 247, 254], [246, 246, 255], [245, 251, 255], [251, 255, 249], [255, 0, 8], [236, 15, 15], [230, 240, 235], [236, 236, 237], [231, 231, 240], [230, 238, 240], [240, 235, 236], [234, 235, 231], [240, 237, 235], [239, 240, 234], [235, 237, 233], [231, 238, 240], [240, 232, 240], [234, 234, 230], [239, 240, 235], [235, 231, 240], [239, 232, 240], [240, 233, 240], [206, 0, 0], [240, 0, 0], [245, 245, 242], [255, 255, 246], [255, 255, 247], [247, 246, 248],
    [251, 255, 247], [251, 255, 251], [252, 255, 255], [245, 255, 253], [253, 3, 1], [254, 0, 14], [231, 240, 240], [238, 236, 240], [236, 239, 239], [236, 238, 236], [238, 234, 238], [201, 204, 195], [240, 236, 237], [232, 238, 239], [239, 233, 232], [240, 231, 233], [240, 240, 240], [232, 240, 236], [232, 236, 232], [240, 236, 240], [234, 236, 230], [231, 232, 240], [226, 0, 0], [193, 0, 0], [253, 255, 255], [255, 245, 255], [253, 255, 252], [229, 229, 231],
    [249, 247, 255], [255, 254, 255], [255, 248, 255], [253, 255, 255], [255, 15, 9], [252, 9, 15], [240, 233, 232], [232, 239, 239], [253, 255, 249], [252, 251, 255], [253, 255, 255], [248, 245, 254], [255, 255, 248], [252, 253, 255], [255, 249, 255], [255, 251, 255], [246, 255, 248], [255, 250, 246], [255, 255, 255], [252, 250, 255], [254, 255, 253], [250, 251, 255], [235, 13, 13], [242, 10, 0], [247, 255, 255], [246, 246, 254], [253, 254, 255], [255, 255, 252],
    [255, 251, 246], [254, 255, 251], [245, 246, 254], [251, 249, 255], [251, 1, 0], [247, 11, 11], [240, 240, 231], [238, 232, 230], [255, 245, 255], [255, 254, 250], [227, 229, 235], [255, 253, 248], [247, 248, 253], [246, 255, 250], [255, 247, 252], [255, 252, 255], [249, 255, 255], [248, 250, 249], [255, 255, 255], [233, 224, 233], [250, 253, 246], [246, 250, 255], [254, 2, 12], [239, 7, 8], [246, 254, 252], [255, 249, 245], [249, 253, 255], [255, 255, 245],
    [249, 255, 253], [255, 250, 250], [255, 246, 247], [255, 250, 250], [255, 2, 3], [243, 12, 13], [238, 231, 232], [231, 240, 240], [255, 255, 248], [248, 255, 247], [250, 248, 250], [249, 255, 252], [255, 251, 251], [255, 255, 252], [255, 255, 250], [245, 247, 255], [255, 255, 255], [255, 249, 251], [252, 248, 249], [246, 255, 255], [255, 245, 251], [254, 249, 248], [255, 2, 10], [237, 5, 3], [255, 245, 251], [255, 255, 246], [255, 248, 248], [248, 255, 255],
    [248, 255, 251], [248, 248, 246], [250, 245, 246], [215, 225, 225], [255, 9, 9], [243, 9, 6], [230, 235, 236], [240, 238, 237], [255, 248, 255], [246, 255, 254], [255, 255, 255], [252, 255, 246], [255, 255, 247], [246, 255, 246], [255, 252, 245], [246, 250, 251], [245, 255, 255], [245, 252, 255], [255, 255, 255], [252, 255, 245], [249, 246, 254], [253, 250, 255], [255, 10, 3], [217, 5, 8], [252, 245, 255], [245, 253, 253], [252, 255, 255], [255, 255, 252],
    [255, 253, 253], [255, 254, 252], [247, 252, 255], [255, 250, 255], [227, 11, 4], [240, 13, 3], [235, 240, 233], [234, 237, 240], [249, 250, 255], [251, 245, 247], [255, 247, 246], [255, 255, 247], [255, 250, 249], [255, 255, 248], [255, 251, 245], [255, 246, 246], [255, 245, 253], [247, 249, 255], [250, 255, 248], [248, 251, 255], [247, 248, 245], [254, 255, 250], [255, 0, 14], [255, 13, 11], [255, 252, 255], [251, 249, 255], [255, 250, 255], [255, 255, 255],
    [252, 252, 255], [249, 255, 255], [247, 254, 255], [251, 246, 255], [227, 13, 13], [220, 8, 0], [240, 232, 234], [240, 235, 240], [255, 247, 248], [253, 253, 255], [255, 255, 252], [246, 248, 251], [247, 255, 255], [255, 255, 255], [255, 253, 251], [247, 255, 253], [255, 255, 250], [254, 255, 255], [249, 255, 255], [255, 248, 254], [253, 255, 255], [246, 255, 250], [246, 1, 7], [238, 12, 5], [255, 245, 247], [245, 245, 254], [254, 249, 252], [249, 248, 255],
    [255, 245, 252], [255, 255, 251], [255, 246, 248], [255, 255, 255], [255, 7, 2], [253, 4, 15], [240, 240, 234], [240, 240, 234], [255, 252, 247], [249, 252, 255], [254, 252, 255], [255, 249, 255], [255, 248, 254], [250, 255, 254], [255, 245, 255], [245, 253, 255], [255, 255, 250], [247, 255, 255], [255, 250, 255], [250, 246, 255], [253, 252, 255], [250, 254, 248], [225, 2, 11], [242, 1, 9], [245, 253, 252], [245, 245, 255], [247, 249, 255], [247, 249, 255],
    [250, 247, 255], [254, 245, 250], [255, 249, 246], [240, 240, 241], [235, 8, 15], [254, 5, 9], [231, 240, 233], [240, 232, 240], [250, 255, 250], [253, 251, 255], [249, 247, 255], [255, 245, 255], [255, 255, 255], [243, 234, 242], [255, 255, 251], [255, 251, 246], [251, 255, 255], [255, 255, 250], [252, 245, 249], [252, 255, 251], [255, 248, 249], [245, 250, 246], [254, 1, 15], [238, 8, 2], [252, 245, 253], [252, 246, 255], [252, 250, 249], [253, 248, 252],
    [255, 255, 255], [253, 253, 247], [251, 255, 246], [255, 255, 247], [222, 10, 15], [235, 3, 15], [240, 240, 236], [232, 240, 239], [255, 254, 254], [249, 251, 255], [255, 247, 255], [247, 255, 255], [255, 255, 250], [255, 247, 246], [255, 254, 252], [255, 254, 245], [246, 246, 254], [248, 248, 247], [252, 245, 253], [245, 246, 245], [246, 248, 248], [245, 245, 253], [255, 9, 12], [250, 8, 11], [251, 254, 250], [251, 255, 255], [245, 255, 247], [246, 247, 251],
    [252, 246, 248], [245, 252, 248], [248, 248, 249], [255, 255, 252], [255, 3, 0], [242, 13, 15], [235, 234, 240], [235, 240, 232], [254, 255, 246], [250, 252, 248], [255, 255, 247], [249, 255, 249], [248, 255, 253], [254, 255, 247], [248, 255, 245], [255, 255, 254], [255, 255, 255], [255, 253, 249], [255, 255, 247], [251, 252, 249], [254, 248, 255], [255, 253, 246], [255, 13, 7], [241, 15, 9], [252, 246, 252], [255, 248, 251], [253, 255, 253], [252, 255, 254],
    [255, 255, 254], [249, 255, 255], [249, 248, 246], [254, 248, 255], [251, 9, 7], [236, 3, 1], [240, 240, 230], [239, 239, 240], [250, 255, 253], [249, 253, 251], [253, 247, 255], [255, 245, 251], [255, 255, 255], [255, 255, 246], [246, 255, 249], [245, 245, 255], [249, 255, 253], [251, 255, 247], [255, 253, 255], [255, 249, 255], [255, 255, 248], [250, 245, 253], [255, 12, 6], [246, 6, 5], [249, 255, 248], [252, 253, 249], [252, 250, 248], [251, 253, 251],
    [255, 245, 248], [255, 251, 247], [255, 255, 245], [255, 248, 251], [220, 10, 8], [208, 8, 1], [240, 240, 240], [240, 240, 233], [252, 245, 249], [251, 245, 252], [251, 250, 252], [254, 247, 251], [251, 255, 255], [255, 246, 250], [245, 245, 255], [247, 246, 245], [255, 254, 246], [255, 254, 254], [255, 254, 250], [255, 255, 245], [248, 255, 254], [255, 252, 255], [253, 7, 4], [241, 14, 0], [246, 255, 254], [254, 255, 246], [252, 245, 250], [255, 251, 253],
    [255, 255, 255], [251, 247, 251], [246, 247, 247], [247, 254, 248], [254, 11, 4], [250, 15, 13], [233, 240, 230], [235, 240, 240], [255, 249, 255], [255, 255, 253], [254, 250, 250], [251, 255, 255], [246, 255, 249], [250, 248, 248], [238, 234, 231], [253, 251, 255], [226, 220, 226], [252, 250, 245], [255, 254, 251], [255, 255, 253], [255, 255, 251], [255, 246, 251], [224, 2, 3], [228, 0, 2], [248, 248, 248], [255, 255, 255], [247, 251, 255], [248, 255, 255],
    [250, 250, 255], [251, 249, 255], [253, 248, 245], [255, 254, 255], [234, 9, 0], [229, 7, 6], [238, 231, 240], [237, 240, 237], [255, 248, 250], [245, 255, 246], [250, 248, 253], [249, 247, 249], [255, 247, 247], [252, 247, 253], [255, 254, 255], [255, 255, 249], [252, 255, 245], [254, 248, 254], [251, 255, 245], [252, 254, 255], [255, 255, 255], [255, 255, 255], [251, 39, 0], [236, 38, 10], [255, 255, 252], [255, 247, 246], [255, 252, 251], [249, 252, 255],
    [247, 255, 253], [247, 252, 248], [252, 252, 255], [252, 248, 255], [255, 15, 8], [255, 11, 11], [222, 0, 0], [226, 0, 0], [226, 1, 10], [255, 11, 2], [238, 15, 10], [253, 13, 5], [255, 4, 5], [239, 11, 8], [197, 0, 0], [254, 5, 11], [231, 6, 2], [255, 13, 1], [255, 1, 3], [232, 14, 8], [230, 13, 7], [255, 28, 2], [239, 45, 8], [251, 26, 5], [247, 248, 255], [253, 252, 255], [255, 251, 250], [249, 249, 255],
    [251, 245, 252], [255, 250, 252], [249, 253, 254], [253, 254, 255], [228, 8, 15], [255, 11, 5], [219, 0, 0], [204, 0, 0], [244, 15, 4], [244, 1, 4], [238, 0, 8], [240, 0, 8], [255, 6, 8], [248, 15, 3], [221, 4, 7], [239, 12, 14], [251, 6, 5], [255, 11, 12], [235, 4, 15], [224, 5, 7], [238, 3, 11], [237, 54, 15], [236, 47, 12], [236, 32, 4], [255, 251, 255], [255, 255, 252], [249, 255, 245], [255, 249, 255],
    [253, 254, 246], [250, 255, 255], [246, 255, 255], [255, 246, 255], [248, 255, 249], [252, 247, 252], [255, 247, 255], [251, 255, 255], [248, 255, 254], [255, 247, 252], [253, 255, 247], [243, 236, 237], [253, 245, 245], [247, 255, 248], [250, 255, 252], [255, 249, 247], [248, 255, 249], [251, 255, 255], [248, 255, 255], [249, 255, 253], [252, 255, 249], [255, 255, 255], [253, 248, 252], [255, 255, 246], [255, 255, 251], [252, 252, 253], [247, 250, 252], [246, 250, 248],
    [249, 251, 247], [246, 255, 252], [255, 255, 246], [255, 250, 255], [246, 248, 252], [255, 255, 252], [254, 247, 255], [251, 246, 255], [248, 245, 246], [248, 251, 246], [255, 252, 254], [248, 255, 245], [254, 255, 255], [255, 251, 254], [255, 249, 247], [235, 244, 244], [245, 249, 255], [250, 255, 255], [252, 255, 255], [255, 255, 255], [255, 255, 247], [253, 247, 246], [248, 255, 246], [248, 250, 255], [248, 250, 249], [255, 255, 255], [252, 246, 249], [254, 247, 245],
    [252, 255, 254], [248, 255, 250], [255, 255, 245], [255, 250, 255], [245, 247, 255], [251, 247, 254], [245, 250, 254], [254, 253, 246], [251, 255, 247], [254, 245, 255], [255, 246, 255], [226, 223, 226], [255, 249, 247], [247, 248, 255], [247, 248, 255], [250, 247, 247], [255, 246, 255], [255, 255, 254], [255, 249, 255], [245, 251, 255], [245, 250, 255], [253, 253, 245], [251, 251, 251], [255, 251, 255], [255, 251, 255], [255, 249, 255], [246, 255, 253], [253, 255, 255],
    [255, 252, 251], [255, 247, 249], [255, 246, 255], [252, 254, 254], [255, 255, 255], [255, 249, 255], [247, 250, 254], [255, 252, 245], [245, 255, 255], [255, 249, 254], [251, 253, 255], [255, 251, 255], [250, 245, 251], [254, 255, 252], [252, 246, 255], [251, 255, 252], [249, 253, 255], [255, 249, 245], [255, 254, 250], [249, 253, 254], [251, 253, 255], [219, 225, 219], [255, 254, 252], [248, 246, 255], [252, 255, 248], [255, 251, 255], [243, 243, 239], [255, 255, 250],
]


envClassifier=EnvClassifier()
edges=envClassifier.getObjsColorBlob(redBox,28)